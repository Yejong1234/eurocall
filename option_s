#include <iostream> //애봉애봉
#include <cmath>
#include <vector>
#include <fstream>
#include <iomanip>
using namespace std;
#define PI 4.0*atan(1.0)
double normcdf(double X)
{
	double L, K, value;
	double const a1 = 0.31938153, a2 = -0.356563782, a3 = 1.781477937,
		a4 = -1.821255978, a5 = 1.330274429;
	L = fabs(X);
	K = 1.0 / (1.0 + 0.2316419*L);
	value = 1.0 - 1.0 / sqrt(2.0*PI)*exp(-0.5*L*L)*(a1*K + a2 * K*K + a3 * pow(K, 3) + a4 * pow(K, 4) + a5 * pow(K, 5));
	if (X < 0) {
		value = 1.0 - value;
	}
	return value;
}
vector<double> linspace(double START, double END, int STEP) {
	vector<double> d;
	double h = (END - START) / (STEP - 1.0);
	for (int i = 0; i < STEP; i++) d.push_back(START + h * i);//이건 일단 잘 모르겠당...
	return d;
}
class option_s
{
public:
	option_s(double nS, double nE, double nT, double nSigma, double nR, int nSTEP)
	{
		m_S = nS; m_E = nE; m_T = nT; m_Sigma = nSigma; m_R = nR; m_STEP = nSTEP;
	}
	void GetOptionPrice(int nType);//이따 옵션 가격 구할 함수 원형 선언
	void WriteData(vector<double> X, vector<double> CP, int nType);
private:
	int m_STEP;
	double m_Sigma, m_S, m_E, m_T, m_R;
};
void option_s::WriteData(vector<double> X, vector<double> CP, int nType)//이 친구들은 왜 parameter로 vector들이 필요한가?
{
	ofstream output;//ofstream이란? output은 그냥 변수 이름이구나!!
	output.open("option_s_S_Data.dat");//여기다 write 하는건가?
	output << fixed << setprecision(6);//소수점 6자리 까지 표현하겠다는 뜻!
	for (unsigned int i = 0; i < CP.size(); i++)//아직 CP의 용도를 잘 모르겠다.
	{
		output << setw(12) << showpoint << CP[i];//setw(12)는 일단 12자리를 확보하고 하겠다는 뜻
	}
	output << endl;
	output.close();
}

void option_s::GetOptionPrice(int nType)
{
	vector<double> X = linspace(0.0, m_S, m_STEP), d1(X.size()), d2(X.size()), CP(X.size());
	for (unsigned int i = 0; i < X.size(); i++) {
		d1[i] = (log(X[i] / m_E) + (m_R + 0.5*pow(m_Sigma, 2.0))*m_T) / (m_Sigma*sqrt(m_T));
		d2[i] = d1[i] - m_Sigma * sqrt(m_T);
		CP[i] = X[i] * normcdf(d1[i]) - m_E * exp(-m_R * m_T)*normcdf(d2[i]);
	}
	WriteData(X, CP, nType);
}
int main()
{
	option_s s1(400, 250, 2.0 / 12, 0.38, 0.06, 50);
	s1.GetOptionPrice(ios::out);
}
